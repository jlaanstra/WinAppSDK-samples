<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition="'$(VisualStudioVersion)' == '' or '$(VisualStudioVersion)' &lt; '15.0'">
    <VisualStudioVersion>15.0</VisualStudioVersion>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x86">
      <Configuration>Debug</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x86">
      <Configuration>Release</Configuration>
      <Platform>x86</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM">
      <Configuration>Debug</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM">
      <Configuration>Release</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM64">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|AnyCPU">
      <Configuration>Debug</Configuration>
      <Platform>AnyCPU</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|AnyCPU">
      <Configuration>Release</Configuration>
      <Platform>AnyCPU</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup>
    <WapProjPath Condition="'$(WapProjPath)'==''">$(MSBuildExtensionsPath)\Microsoft\DesktopBridge\</WapProjPath>
  </PropertyGroup>
  <Import Project="$(WapProjPath)\Microsoft.DesktopBridge.props" />
  <PropertyGroup>
    <ProjectGuid>c15018af-8a42-4a55-b453-54bffcdda370</ProjectGuid>
    <TargetPlatformVersion>10.0.22000.0</TargetPlatformVersion>
    <TargetPlatformMinVersion>10.0.18362.0</TargetPlatformMinVersion>
    <DefaultLanguage>en-US</DefaultLanguage>
    <AppxBundle>Always</AppxBundle>
    <AppxPackageSigningEnabled>false</AppxPackageSigningEnabled>
    <BuildProjectReferences>true</BuildProjectReferences>
    <EntryPointProjectUniqueName>..\UWPApp\UWPApp.csproj</EntryPointProjectUniqueName>
  </PropertyGroup>
  <ItemGroup>
    <AppxManifest Include="Package.appxmanifest">
      <SubType>Designer</SubType>
    </AppxManifest>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\UWPApp\UWPApp.csproj" />
  </ItemGroup>
  <Import Project="$(WapProjPath)\Microsoft.DesktopBridge.targets" />
  <!-- Packaging project is causing trouble with parallel builds as it modifies the global properties,
       used by MSBuild to decide if a project is build already. Overriding it to prevent this from
       causing build errors. -->
  <!-- Call SetProjectReferenceProperties immediately after AssignProjectConfiguration to set the Project metadata early enough to avoid RuntimeIdentifier errors like in Bug1333386. -->
  <Target Name="SetProjectReferenceProperties" AfterTargets="AssignProjectConfiguration" Returns="@(ProjectReferenceWithExtraMetadata)">
    <ItemGroup>
      <!-- There is no guarantee that _MSBuidlProjectReferenceExistent is set at this point.  Instead, use ProjectReferenceWithConfiguration -->
      <_ProjectReferenceClosure Include="@(ProjectReferenceWithConfiguration->'%(Identity)')">
        <DependencyKind>Direct</DependencyKind>
      </_ProjectReferenceClosure>
    </ItemGroup>
    <ItemGroup>
      <_WapReferenceProps Include="%(ProjectReferenceWithConfiguration.SetConfiguration)" />
      <_WapReferenceProps Include="%(ProjectReferenceWithConfiguration.SetPlatform)" />
    </ItemGroup>
    <!-- Projects can specify additional projects -->
    <MSBuild Targets="GetDeployableContentReferenceOutputs" Projects="@(ProjectReferenceWithConfiguration)" Properties="@(_WapReferenceProps)" SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs" ItemName="_DeployableContentProjectReferences" />
    </MSBuild>
    <ItemGroup>
      <_ProjectReferenceClosure Include="@(_DeployableContentProjectReferences->'%(Identity)')" Condition="Exists('%(Identity)')">
        <DependencyKind>Direct</DependencyKind>
        <DeployableContentReference>True</DeployableContentReference>
      </_ProjectReferenceClosure>
    </ItemGroup>
    <AddProjectMetadata Projects="@(_ProjectReferenceClosure)" SolutionDir="$(SolutionDir)" ParentConfiguration="$(Configuration)" ParentPlatform="$(Platform)" VsTelemetrySession="$(VsTelemetrySession)" OriginalTargetDir="$(OriginalTargetDir)" RequestingProject="$(RequestingProject)">
      <Output TaskParameter="ProjectReferenceWithExtraMetadata" ItemName="ProjectReferenceWithExtraMetadata" />
    </AddProjectMetadata>
    <!-- Below task is adding new global properties that cause build issues. -->
    <!--<SetPublishProperties
      Projects="@(ProjectReferenceWithExtraMetadata)"
      BuildingInsideVisualStudio="$(_IsBuildingInsideVisualStudio)"
      IsGeneratingAppxPackage="$(_IsGeneratingAppxPackage)">
      <Output TaskParameter="ProjectReferenceWithPublishProps" ItemName="ProjectReferenceWithPublishProps"/>
    </SetPublishProperties>-->
    <ItemGroup>
      <ProjectReferenceWithPublishProps Include="@(ProjectReferenceWithExtraMetadata)" />
    </ItemGroup>
    <!-- We need to replace these items as we have now potentially altered output paths with the publish properties and RAR will fail to find dependencies -->
    <ItemGroup>
      <_MSBuildProjectReferenceExistent Remove="@(_MSBuildProjectReferenceExistent)" />
      <_MSBuildProjectReferenceExistent Include="@(ProjectReferenceWithPublishProps)" />
    </ItemGroup>
    <!-- Desktop WinUI Apps build using UAP but don't set WindowsAppContainer to true, so treat them like Windows .-->
    <ItemGroup>
      <ProjectReferenceWithExtraMetadata Update="@(ProjectReferenceWithExtraMetadata)" Condition="'%(TargetPlatformIdentifier)'=='UAP' AND ('%(OutputType)'=='Exe' OR '%(OutputType)'=='WinExe') AND '%(WindowsAppContainer)'!='true'">
        <TargetPlatformIdentifier>Windows</TargetPlatformIdentifier>
      </ProjectReferenceWithExtraMetadata>
    </ItemGroup>
  </Target>
  <!-- Ensure our ProjectReferences are built with our needed properties as we turned off BuildProjectReferences -->
  <Target Name="_BuildDependentProjects" Condition="'$(WapAlwaysBuildDependentProjects)' == 'true'&#xD;&#xA;                  or '$(BuildingInsideVisualStudio)' != 'true'&#xD;&#xA;                  or '$(_IsGeneratingAppxPackage)' == 'true'" DependsOnTargets="_WapProjGetProjectClosure;_BuildSolutionDependencyProjects" Inputs="@(_NonWapProjProjectReference)" Outputs="fake" Returns="@(ProjectReferenceWithPublishProps)">
    <!-- Override targets that modifies GlobalProperties and cause duplicate builds. -->
    <!--<MSBuild
      Projects="@(ProjectReferenceWithPublishProps)"
      Condition="'%(ProjectReferenceWithPublishProps.TargetFrameworkIdentifier)' != '.NETCoreApp'"
      Targets="$(_TargetsToBuild)"
      SkipNonexistentTargets="true"
      Properties="%(ProjectReferenceWithPublishProps.SetConfiguration);%(ProjectReferenceWithPublishProps.SetPlatform)"/>-->
    <MSBuild Projects="@(ProjectReferenceWithPublishProps)" Condition="'%(ProjectReferenceWithPublishProps.TargetFrameworkIdentifier)' == '.NETCoreApp'" Targets="publish" SkipNonexistentTargets="true" Properties="%(ProjectReferenceWithPublishProps.SetConfiguration);%(ProjectReferenceWithPublishProps.SetPlatform)" />
  </Target>
  <Target Name="_GenerateReferenceRecipes" />
</Project>